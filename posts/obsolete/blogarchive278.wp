**The Primes**素数方阵

IOI'94

译 by Felicia Crazy

在下面的方格中，每行，每列，以及两条对角线上的数字可以看作是五位的素数。方格中的行按照从左到右的顺序组成一个素数，而列按照从上到下的顺序。两条对角线也是按照
从左到右的顺序来组成。

##

## 描述

    
    +---+---+---+---+---+
    
     | 1 | 1  | 3 | 5  | 1 |
    
    +---+---+---+---+---+
    
     | 3 | 3  | 2 | 0  | 3 |
    
    +---+---+---+---+---+
    
     | 3 | 0  | 3 | 2  | 3 |
    
    +---+---+---+---+---+
    
     | 1 | 4  | 0 | 3  | 3 |
    
    +---+---+---+---+---+
    
     | 3 | 3  | 3 | 1  | 1 |
    
    +---+---+---+---+---+

  * 这些素数各个数位上的和必须相等。
  * 左上角的数字是预先定好的。
  * 一个素数可能在方阵中重复多次。
  * 如果不只有一个解，将它们全部输出（按照这25个数字组成的25位数的大小排序）。
  * 一个五位的素数开头不能为0（例如：00003 不是五位素数）

##  格式

**PROGRAM NAME**: prime3

**INPUT FORMAT**:

(file prime3.in)

一行包括两个被空格分开的整数:各数位上的数字的和 以及左上角的数字。

**OUTPUT FORMAT**:

(file prime3.out)

对于每一个找到的方案输出5行，每行5个字符, 每行可以转化为一个5位的质数.在两组方案中间输出一个空行. 如果没有解就单独输出一行"NONE"。

## SAMPLE INPUT

    
    11 1

## SAMPLE OUTPUT

上面的例子有三组解。

    
    11351
    
    14033
    
    30323
    
    53201
    
    13313
    
    
    
    11351
    
    33203
    
    30323
    
    14033
    
    33311
    
    
    
    13313
    
    13043
    
    32303
    
    50231
    
    13331

（题目翻译来源于：http://www.nocow.cn/index.php/Translate:USACO/prime3）
我的做法异常猥琐。生成符合条件的素数表，再枚举对角线（因为这样能限制很多格子的取值），然后再枚举四个边缘。
我就是傻X在枚举完以上两个之后，居然还在枚举。。。 X X X X X X X . X X X . X . X X X . X X X X X X X
实际上只有四个点点了，可以直接sum - (...+...) 计算出 再进行检验 所以可以搞定
因为我没有及时发现“可以计算”这个简单事实。。我多写了很多代码。。。现在全部被删。。。x x 重要的优化是：为了加速寻找形如 A . . B / . A .
B . / . . A . . 的素数是否存在 代码：

    
    /*
    
    ID:ymf11111
    
    TASK:prime3
    
    LANG:C++
    
    */
    
    #include 
    
    #include 
    
    #include 
    
    #include 
    
    
    
    #define MAXP 100000
    
    #define MAXA 1000
    
    #define MAXR 100
    
    #define NUM(a,b,c,d,e) (a*10000+b*1000+c*100+d*10+e)
    
    
    
    using namespace std;
    
    
    
    struct rec {
    
    	int cnt;
    
    	int src[MAXR][6];
    
    };
    
    
    
    bool isp[MAXP];
    
    int prime[MAXP],cp = 0;
    
    int np[10000][6],cnp = 0;
    
    int sum,cor,area[6][6],t = 0;
    
    ///
    
    rec pat1[10][10]; // X...Y
    
    rec pat2[10][10]; // .X.Y.
    
    rec pat3[10]; // ..X..
    
    ///Dicts
    
    
    
    char ans[MAXA][26];
    
    int cans = 0;
    
    
    
    void sprime(int Limit) {
    
    
    
    	memset(isp,255,sizeof(isp));
    
    	for (int i = 2; i <= Limit; i++)
    
    	{
    
    		if (isp[i]) prime[++cp] = i;//collect primes
    
    		for (int j = 1; j <= cp && (prime[j] * i <= Limit); j++)
    
    		{
    
    			isp[prime[j] * i] = 0;
    
    			if (!(i % prime[j])) break;//the most important and efficient
    
    		}
    
    	}
    
    }
    
    
    
    void print() {
    
    	if (!cans) printf("%s\n","NONE");
    
    	else
    
    		for (int i = 1; i <= cans; i++)
    
    		{
    
    			for (int j = 1; j <= 25; j++) 				if (j % 5) printf("%d",(int)ans[i][j]); 				else printf("%d\n",(int)ans[i][j]); 			if (i != cans) printf("\n"); 		} } void row_fill() { 	rec &p11 = pat1[area[1][1]][area[1][5]],&p12 = pat1[area[1][5]][area[5][5]], 		&p13 = pat1[area[5][1]][area[5][5]],&p14 = pat1[area[1][1]][area[5][1]], 		&p21 = pat2[area[2][2]][area[2][4]],&p22 = pat2[area[2][4]][area[4][4]], 		&p23 = pat2[area[4][2]][area[4][4]],&p24 = pat2[area[2][2]][area[4][2]], 		&p33 = pat3[area[3][3]]; 	if (!(p11.cnt && p12.cnt && p13.cnt && p14.cnt && p21.cnt && p22.cnt && p23.cnt && p24.cnt && p33.cnt)) return; 	for (int i11 = p11.cnt; i11 >= 1; i11--)
    
    	{
    
    		memmove(area[1],p11.src[i11],24);
    
    		for (int i13 = p13.cnt; i13 >= 1; i13--)
    
    		{
    
    			memmove(area[5],p13.src[i13],24);
    
    
    
    			if (!(pat1[area[1][2]][area[5][2]].cnt && pat1[area[1][3]][area[5][3]].cnt && pat1[area[1][4]][area[5][4]].cnt)) continue;
    
    			for (int i12 = p12.cnt; i12 >= 1; i12--)
    
    			{
    
    				area[2][5] = p12.src[i12][2];  area[3][5] = p12.src[i12][3]; area[4][5] = p12.src[i12][4];
    
    				for (int i14 = p14.cnt; i14 >= 1; i14--)
    
    				{
    
    					area[2][1] = p14.src[i14][2]; area[3][1] = p14.src[i14][3]; area[4][1] = p14.src[i14][4];
    
    					if (!(pat1[area[2][1]][area[2][5]].cnt && pat1[area[3][1]][area[3][5]].cnt && pat1[area[4][1]][area[4][5]].cnt)) continue;
    
    					area[2][3] = sum - area[2][1] - area[2][2] - area[2][4] - area[2][5];
    
    					if (!isp[NUM(area[2][1],area[2][2],area[2][3],area[2][4],area[2][5])]) continue;
    
    					area[3][4] = sum - area[1][4] - area[2][4] - area[4][4] - area[5][4];
    
    					if (!(isp[NUM(area[1][4],area[2][4],area[3][4],area[4][4],area[5][4])])) continue;
    
    
    
    					area[4][3] = sum - area[4][1] - area[4][2] - area[4][4] - area[4][5];
    
    					if (!(isp[NUM(area[4][1],area[4][2],area[4][3],area[4][4],area[4][5])])) continue;
    
    					area[3][2] = sum - area[1][2] - area[2][2] - area[4][2] - area[5][2];
    
    					if (!(isp[NUM(area[1][2],area[2][2],area[3][2],area[4][2],area[5][2])])) continue;
    
    
    
    					if (isp[NUM(area[1][3],area[2][3],area[3][3],area[4][3],area[5][3])] &&
    
    							isp[NUM(area[3][1],area[3][2],area[3][3],area[3][4],area[3][5])])
    
    					{
    
    						int cnt = 0; cans++;
    
    						for (int i = 1; i <= 5; i++)
    
    							for (int j = 1; j <= 5; j++)
    
    								ans[cans][++cnt] = area[i][j];}
    
    				}
    
    			}
    
    		}
    
    	}
    
    }
    
    
    
    void cross_fill() {
    
    
    
    	for (int i = 1; i <= cnp; i++) //cross 1
    
    		if (np[i][1] == cor)
    
    		{
    
    			for (int j = 1; j <= 5; j++)  area[j][j] = np[i][j];
    
    			for (int j = 1; j <= cnp; j++) //cross2 				if (np[j][3] == np[i][3]) 				{ 					for (int k = 5,k2 = 1; k >= 1; k--,k2++) area[k][k2] = np[j][k2];
    
    					row_fill();
    
    				}
    
    		}
    
    }
    
    
    
    int cmp(const void *a,const void *b) {
    
    	char *sa = (char*)a;
    
    	char *sb = (char*)b;
    
    	for (int i = 1; i <= 25; i++)  		if (sa[i] > sb[i]) return 1;
    
    		else if (sa[i] < sb[i]) return -1;
    
    	return 1;
    
    }
    
    
    
    int main() {
    
    
    
    	freopen("prime3.in","r",stdin);
    
    	freopen("prime3.out","w",stdout);
    
    
    
    	sprime(99999);
    
    	memset(isp,0,sizeof(isp));
    
    	memset(pat1,0,sizeof(pat1));
    
    	memset(pat2,0,sizeof(pat2));
    
    	memset(pat3,0,sizeof(pat3));
    
    
    
    	scanf("%d%d",∑,&cor);
    
    	for (int i = 1; i <= cp; i++)  		if (prime[i] > 9999)
    
    		{
    
    			int tmp = 0,tp = prime[i],tn[6]; tn[0] = 5;
    
    			while (tp > 0) {tmp += tp % 10; tn[tn[0]--] = tp % 10; tp /= 10; }
    
    			if (tmp == sum)
    
    			{
    
    				memmove(np[++cnp],tn,sizeof(tn));
    
    				np[cnp][0] = prime[i];
    
    				isp[prime[i]] = 1; //relabel
    
    				int cnt1 = ++pat1[tn[1]][tn[5]].cnt;
    
    				memmove(pat1[tn[1]][tn[5]].src[cnt1],tn,sizeof(pat1[0][0].src[0]));
    
    
    
    				int cnt2 = ++pat2[tn[2]][tn[4]].cnt;
    
    				memmove(pat2[tn[2]][tn[4]].src[cnt2],tn,sizeof(pat2[0][0].src[0]));
    
    
    
    				int cnt3 = ++pat3[tn[3]].cnt;
    
    				memmove(pat3[tn[3]].src[cnt3],tn,sizeof(pat3[0].src[0]));
    
    			}
    
    		}
    
    	///make prime table
    
    
    
    	cross_fill();
    
    	qsort(ans + 1,cans,sizeof(ans[0]),cmp);
    
    	print();
    
    }

