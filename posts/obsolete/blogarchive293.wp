**SSGA** 是俺自己创造的一个无聊的算法 通过对16个8位的变量每次进行轮转等猥琐操作可以生成一个数列 而该数列具有很难重复和伪随机的特性（已测定将数列中每个数mod P，在数列足够长的情况下 余 0..P-1 的个数相近，**但我无法证明**） 总之此算法接受一个MD5序列作为种子 并生成任意长的数列 Xem是我写的用这个序列来对一个文件的二进制4字节4字节地与数列对应数进行异或的加密程序，并最后再进行base64转码（文件base64代码自己写的），以便发布。（其实就是为了好看。。x x）**感谢RSA实验室的md5lib.h**（我不想写也写不来。。） 经过无数次测验和修改后第一个测试v0.3版释出！  xem.cpp 主程序 
    
    
    
    /*
    
     * $File: xem.cpp
    
     * $Date: Sun Apr 11 16:15:33 2010 CST
    
     * $Author: Ted Yin 
    
     *
    
     * @package:Xem
    
     * @license:GNU Lesser General Public License 3 or any later version                   
    
     * @note:CST in $Date means China Standard Time instead of Central Standard Time
    
     */
    
    
    
    #include 
    
    #include 
    
    #include 
    
    #include 
    
    #include "xemfunc.h"
    
    #include "base64.h"
    
    
    
    #define MAXP 2048
    
    
    
    using namespace std;
    
    
    
    void showhelp() {
    
    	printf("\n>>> Simple Sequence Generation Algorithm v0.3 \n\n");
    
    	printf(">>> Copyright (C) 2010 Ted Yin\n");
    
    	printf(">>> License GPLv3+: GNU GPL version 3 or later \n");
    
    	printf(">>> There is NO WARRANTY, to the extent permitted by law.\n");
    
    	printf("\n>>> Usage: -e for Encode (-d for Decode) SrcNAME DestNAME\n");
    
    	printf("\n");
    
    }
    
    
    
    int main(int argc,char **argv) {
    
    
    
    	char pwd[MAXP],rpwd[MAXP],*ptr = pwd,*rptr = rpwd;
    
    	int mode,res,inc;
    
    
    
    	if (argc != 4) {showhelp(); return 0 ;}
    
    	if (!strcmp(argv[1],"-e")) mode = 1;
    
    		else if (!strcmp(argv[1],"-d")) mode = 0;
    
    			else {showhelp(); return 0;}
    
    	
    
    	if (!strlen(argv[2]) || !strlen(argv[3])) {showhelp(); return 0;}
    
    
    
    
    
    	struct termios sg; 
    
    	tcgetattr(STDIN_FILENO, &sg); /* get settings */
    
    	sg.c_lflag &= ~ECHO; /* turn echo off */ 
    
    	tcsetattr(STDIN_FILENO,TCSAFLUSH,&sg); /* set settings */
    
    
    
    	printf("Enter password >>> ");
    
    	inc = 0;
    
    	while ((*ptr++ = getc(stdin)) != '\n'); 
    
    		if (inc++ == MAXP) 
    
    		{
    
    			printf("Password is too long!"); 
    
    			return 0;
    
    		}
    
    	*(ptr - 1) = 0;
    
    	printf("\n");
    
    
    
    	printf("Repeat>>> ");
    
    	inc = 0;
    
    	while ((*rptr++ = getc(stdin)) != '\n')
    
    		if (inc++ == MAXP) 
    
    		{
    
    			printf("Password repeated is too long!"); 
    
    			return 0;
    
    		}
    
    	*(rptr - 1) = 0;
    
    	printf("\n");
    
    	
    
    	tcgetattr(STDIN_FILENO, &sg); /* get settings */
    
    	sg.c_lflag |= ECHO; /* turn echo on */
    
    	tcsetattr(STDIN_FILENO,TCSAFLUSH,&sg); /* set settings */
    
    
    
    	if (strcmp(pwd,rpwd)) {printf("Passwords are not the same!\n"); return 0;}
    
    	if (mode == 1) res = xem_encode(pwd,(const char*)argv[2],(const char*)argv[3]);
    
    		else res = xem_decode(pwd,(const char*)argv[2],(const char *)argv[3]);
    
    
    
    	if (!res) printf("Failed!\n");
    
    
    
    	return 0;
    
    }
    
    

xemfunc.cpp SSGA的实现部分

    
    
    
    /*
    
     * $File: xemfunc.cpp
    
     * $Date: Sun Apr 11 16:18:38 2010 CST
    
     * $Author: Ted Yin 
    
     *
    
     * @package:Xem
    
     * @license:GNU Lesser General Public License 3 or any later version                   
    
     * @note:CST in $Date means China Standard Time instead of Central Standard Time
    
     */
    
    
    
    #include 
    
    #include 
    
    #include 
    
    #include "md5lib.h"
    
    #include "xemfunc.h"
    
    #include "base64.h"
    
    
    
    #define MASK 0xFFFFFFFF
    
    
    
    using namespace std;
    
    
    
    const int shift[7]={0,1,1,2,2,1,1};
    
    
    
    bool Xem(char* PASSWD,const char *infile,const char *outfile) {
    
    
    
    	char* MD5_HASH;
    
    	unsigned int B[20];
    
    	unsigned int NOW_KEY=0,MYS1=0,MYS2=0;
    
    	unsigned int BUFF = 0;
    
    
    
    	MD5_HASH=MDString(PASSWD);
    
    	B[0]=0;
    
    	for (int i=1; i>8) | T)+i) & MASK);
    
    			NOW_KEY ^= B[i];			
    
    		}
    
    		for (int i=7; i
    
    
    
    base64.cpp Base64编码实现部分
    
    
    
    
    
    /*
    
     * $File: base64.cpp
    
     * $Date: Sun Apr 11 16:15:06 2010 CST
    
     * $Author: Ted Yin 
    
     *
    
     * @package:Xem
    
     * @license:GNU Lesser General Public License 3 or any later version                   
    
     * @note:CST in $Date means China Standard Time instead of Central Standard Time
    
     */
    
    
    
    #include 
    
    #include 
    
    #include 
    
    #include "base64.h"
    
    
    
    #define OMAXBuff 59049
    
    #define BMAXBuff 65536
    
    
    
    using namespace std;
    
    
    
    const unsigned char table[65] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    
    unsigned char table2[257];
    
    
    
    void base64_init() {
    
    
    
    	for (int i = 'A'; i > 18];
    
    		*ptr2++ = table[(buffer & 0x03F000) >> 12];
    
    		*ptr2++ = table[(buffer & 0x000FC0) >> 6];
    
    		*ptr2++ = table[buffer & 0x00003F];
    
    		ptr += 3;
    
    	}
    
    	if (remain == 2)
    
    	{
    
    		buffer = ((*ptr) > 18];
    
    		*ptr2++ = table[(buffer & 0x03F000) >> 12];
    
    		*ptr2++ = table[(buffer & 0x000FC0) >> 6];
    
    		*ptr2++ = '=';
    
    	}
    
    	else if (remain)
    
    	{
    
    		buffer = (*ptr) > 18];
    
    		*ptr2++ = table[(buffer & 0x03F000) >> 12];
    
    		*ptr2++ = '='; *ptr2 = '=';
    
    	}
    
    	return final;
    
    }
    
    
    
    int base64_decode(unsigned char *dest,unsigned char *text,int len) {
    
    	
    
    	unsigned int buffer;
    
    	unsigned char *ptr = text,*ptr2 = dest;
    
    	int blocks = len >> 2,inc = 0,final = 0;
    
    	while (++inc > 16;
    
    		*ptr2++ = (buffer & 0x00FF00) >> 8;
    
    		*ptr2++ = (buffer & 0x0000FF);
    
    		ptr += 4; final += 3;
    
    	}
    
    	if (text[len - 1] == '=') final--; // '=' is not a real byte !!!
    
    	if (text[len - 2] == '=') final--;
    
    
    
    	return final;
    
    }
    
    
    
    bool base64_file_encode(const char *infile,const char *outfile) {
    
    
    
    	FILE *INPUT = fopen(infile,"rb");
    
    	FILE *OUTPUT = fopen(outfile,"wb");
    
    	
    
    	if (INPUT == NULL || OUTPUT == NULL) return 0; //failed
    
    
    
    	unsigned char buff1[OMAXBuff],buff2[OMAXBuff];
    
    	int insize = 0,outsize = 0;
    
    	while (insize = fread(buff1,1,OMAXBuff,INPUT))
    
    	{
    
    		outsize = base64_encode(buff2,buff1,insize);
    
    		if (!fwrite(buff2,1,outsize,OUTPUT)) return 0;
    
    	}
    
    
    
    	fclose(INPUT);
    
    	fclose(OUTPUT);
    
    	return 1;
    
    }
    
    
    
    
    
    bool base64_file_decode(const char *infile,const char *outfile) {
    
    
    
    	FILE *INPUT = fopen(infile,"rb");
    
    	FILE *OUTPUT = fopen(outfile,"wb");
    
    	
    
    	if (INPUT == NULL || OUTPUT == NULL) return 0; //failed
    
    
    
    	base64_init(); //
    
    
    
    	unsigned char buff1[BMAXBuff],buff2[BMAXBuff];
    
    	int insize = 0,outsize = 0;
    
    	while (insize = fread(buff1,1,BMAXBuff,INPUT))
    
    	{
    
    		outsize = base64_decode(buff2,buff1,insize);
    
    		if (!fwrite(buff2,1,outsize,OUTPUT)) return 0;
    
    	}
    
    
    
    	fclose(INPUT);
    
    	fclose(OUTPUT);
    
    
    
    	return 1;
    
    }
    
    

接下来是各种头文件：

    
    
    
    /*
    
     * $File: xemfunc.h
    
     * $Date: Sun Apr 11 11:47:56 2010 CST
    
     * $Author: Ted Yin 
    
     *
    
     * @package:Xem
    
     * @license:GNU Lesser General Public License 3 or any later version                   
    
     * @note:CST in $Date means China Standard Time instead of Central Standard Time
    
     */
    
    
    
    
    
    #ifndef XEMFUNC_H
    
    #define XEMFUNC_H
    
    
    
    bool xem_encode(char *PASSWD,const char *INPUT,const char *OUTPUT);
    
    bool xem_decode(char *PASSWD,const char *INPUT,const char *OUTPUT);
    
    
    
    #endif //XEMFUNC_H
    
    
    
    
    
    /*
    
     * $File: base64.h
    
     * $Date: Sun Apr 11 11:49:23 2010 CST
    
     * $Author: Ted Yin 
    
     *
    
     * @package:Xem
    
     * @license:GNU Lesser General Public License 3 or any later version                   
    
     * @note:CST in $Date means China Standard Time instead of Central Standard Time
    
     */
    
    
    
    #ifndef BASE64_H
    
    #define BASE64_H
    
    
    
    void base64_init();
    
    int base64_encode(char *DEST,char *TEXT,int len);
    
    int base64_decode(char *DEST,char *TEXT,int len);
    
    
    
    bool base64_file_encode(const char *input,const char *output);
    
    bool base64_file_decode(const char *input,const char *output);
    
    
    
    #endif // BASE64_H
    
    
    
    
    
    /* MD5lib.h - md5 library
    
    *
    
    * Copyright (C) 1990-2, RSA Data Security, Inc. Created 1990. All
    
    * rights reserved.
    
    
    
    * RSA Data Security, Inc. makes no representations concerning either
    
    * the merchantability of this software or the suitability of this
    
    * software for any particular purpose. It is provided "as is"
    
    * without express or implied warranty of any kind.
    
    
    
    * These notices must be retained in any copies of any part of this
    
    * documentation and/or software.
    
    
    
    * The following makes MD default to MD5 if it has not already been
    
    * defined with C compiler flags.
    
    */
    
    
    
    #pragma once
    
    
    
    #include 
    
    #include 
    
    #include 
    
    
    
    #define MD 5
    
    
    
    /* GLOBAL.H - RSAREF types and constants
    
    
    
    * PROTOTYPES should be set to one if and only if the compiler supports
    
    * function argument prototyping.
    
    * The following makes PROTOTYPES default to 0 if it has not already
    
    * been defined with C compiler flags.
    
    */
    
    
    
    #ifndef PROTOTYPES
    
    #define PROTOTYPES 1
    
    #endif
    
    
    
    typedef unsigned char *POINTER; /* POINTER defines a generic pointer type */
    
    typedef unsigned short int UINT2; /* UINT2 defines a two byte word */
    
    typedef unsigned long int UINT4; /* UINT4 defines a four byte word */
    
    
    
    /* PROTO_LIST is defined depending on how PROTOTYPES is defined above.
    
    If using PROTOTYPES, then PROTO_LIST returns the list, otherwise it returns an empty list. */
    
    
    
    #if PROTOTYPES
    
    #define PROTO_LIST(list) list
    
    #else
    
    #define PROTO_LIST(list) ()
    
    #endif
    
    
    
    /* Length of test block, number of test blocks. */
    
    #define TEST_BLOCK_LEN 1000
    
    #define TEST_BLOCK_COUNT 1000
    
    
    
    /* Constants for MD5Transform routine. */
    
    #define S11 7
    
    #define S12 12
    
    #define S13 17
    
    #define S14 22
    
    #define S21 5
    
    #define S22 9
    
    #define S23 14
    
    #define S24 20
    
    #define S31 4
    
    #define S32 11
    
    #define S33 16
    
    #define S34 23
    
    #define S41 6
    
    #define S42 10
    
    #define S43 15
    
    #define S44 21
    
    
    
    char* MDString PROTO_LIST ((char *));
    
    char* MDFile PROTO_LIST ((char *));
    
    char* hmac_md5(char* text, char* key);
    
    
    
    typedef struct {
    
    UINT4 state[4];    /* state (ABCD) */
    
    UINT4 count[2];        /* number of bits, modulo 2^64 (lsb first) */
    
    unsigned char buffer[64]; /* input buffer */
    
    } MD5_CTX;
    
    
    
    static unsigned char PADDING[64] = {
    
    0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    
    };
    
    
    
    /* F, G, H and I are basic MD5 functions. */
    
    #define F(x, y, z) (((x) & (y)) | ((~x) & (z)))
    
    #define G(x, y, z) (((x) & (z)) | ((y) & (~z)))
    
    #define H(x, y, z) ((x) ^ (y) ^ (z))
    
    #define I(x, y, z) ((y) ^ ((x) | (~z)))
    
    
    
    /* ROTATE_LEFT rotates x left n bits. */
    
    #define ROTATE_LEFT(x, n) (((x) > (32-(n))))
    
    
    
    /* FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
    
    Rotation is separate from addition to prevent recomputation. */
    
    #define FF(a, b, c, d, x, s, ac) { \
    
    (a) += F ((b), (c), (d)) + (x) + (UINT4)(ac); \
    
    (a) = ROTATE_LEFT ((a), (s)); \
    
    (a) += (b); \
    
    }
    
    #define GG(a, b, c, d, x, s, ac) { \
    
    (a) += G ((b), (c), (d)) + (x) + (UINT4)(ac); \
    
    (a) = ROTATE_LEFT ((a), (s)); \
    
    (a) += (b); \
    
    }
    
    #define HH(a, b, c, d, x, s, ac) { \
    
    (a) += H ((b), (c), (d)) + (x) + (UINT4)(ac); \
    
    (a) = ROTATE_LEFT ((a), (s)); \
    
    (a) += (b); \
    
    }
    
    #define II(a, b, c, d, x, s, ac) { \
    
    (a) += I ((b), (c), (d)) + (x) + (UINT4)(ac); \
    
    (a) = ROTATE_LEFT ((a), (s)); \
    
    (a) += (b); \
    
    }
    
    
    
    void MD5Init (MD5_CTX *context);
    
    void MD5Update(MD5_CTX *context, unsigned char *input,unsigned int inputLen);
    
    
    
    void MD5Final (unsigned char digest[16], MD5_CTX *context);
    
    static void MD5Transform (UINT4 [4], unsigned char [64]) ;
    
    static void Encode(unsigned char *, UINT4 *, unsigned int);
    
    static void Decode (UINT4 *, unsigned char *, unsigned int);
    
    static void MD5_memcpy(POINTER, POINTER, unsigned int);
    
    static void MD5_memset(POINTER, int, unsigned int);
    
    
    
    /* MD5 initialization. Begins an MD5 operation, writing a new context. */
    
    void MD5Init (MD5_CTX *context) /* context */
    
    {
    
    context->count[0] = context->count[1] = 0;
    
    /* Load magic initialization constants. */
    
    context->state[0] = 0x67452301;
    
    context->state[1] = 0xefcdab89;
    
    context->state[2] = 0x98badcfe;
    
    context->state[3] = 0x10325476;
    
    }
    
    
    
    /* MD5 block update operation. Continues an MD5 message-digest
    
    operation, processing another message block, and updating the context. */
    
    void MD5Update (MD5_CTX *context, unsigned char *input, unsigned int inputLen)
    
         /* context */ /* input block */ /* length of input block */
    
    {
    
    unsigned int i, index, partLen;
    
    
    
    /* Compute number of bytes mod 64 */
    
    index = (unsigned int)((context->count[0] >> 3) & 0x3F);
    
    
    
    /* Update number of bits */
    
    if ((context->count[0] += ((UINT4)inputLen count[1]++;
    
    context->count[1] += ((UINT4)inputLen >> 29);
    
    
    
    partLen = 64 - index;
    
    
    
    /* Transform as many times as possible. */
    
    if (inputLen >= partLen)
    
    {
    
        MD5_memcpy ((POINTER)&context->buffer[index], (POINTER)input, partLen);
    
        MD5Transform (context->state, context->buffer);
    
    
    
       for (i = partLen; i + 63 state, &input[i]);
    
        index = 0;
    
    }
    
    else
    
        i = 0;
    
    
    
    /* Buffer remaining input */
    
    MD5_memcpy ((POINTER)&context->buffer[index], (POINTER)&input[i], inputLen-i);
    
    }
    
    
    
    /* MD5 finalization. Ends an MD5 message-digest operation, writing the
    
    the message digest and zeroizing the context. */
    
    void MD5Final (unsigned char digest[16], MD5_CTX *context)
    
         /* message digest */ /* context */
    
    {
    
    unsigned char bits[8];
    
    unsigned int index, padLen;
    
    
    
    /* Save number of bits */
    
    Encode (bits, context->count, 8);
    
    
    
    /* Pad out to 56 mod 64.*/
    
    index = (unsigned int)((context->count[0] >> 3) & 0x3f);
    
    padLen = (index state, 16);
    
    
    
    /* Zeroize sensitive information.*/
    
    MD5_memset ((POINTER)context, 0, sizeof (*context));
    
    }
    
    
    
    /* MD5 basic transformation. Transforms state based on block. */
    
    static void MD5Transform (UINT4 state[4], unsigned char block[64])
    
    {
    
    UINT4 a = state[0], b = state[1], c = state[2], d = state[3], x[16];
    
    Decode (x, block, 64);
    
    
    
    /* Round 1 */
    
    FF (a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */
    
    FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */
    
    FF (c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */
    
    FF (b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */
    
    FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */
    
    FF (d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */
    
    FF (c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */
    
    FF (b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */
    
    FF (a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */
    
    FF (d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */
    
    FF (c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */
    
    FF (b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */
    
    FF (a, b, c, d, x[12], S11, 0x6b901122); /* 13 */
    
    FF (d, a, b, c, x[13], S12, 0xfd987193); /* 14 */
    
    FF (c, d, a, b, x[14], S13, 0xa679438e); /* 15 */
    
    FF (b, c, d, a, x[15], S14, 0x49b40821); /* 16 */
    
    
    
    /* Round 2 */
    
    GG (a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */
    
    GG (d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */
    
    GG (c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */
    
    GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */
    
    GG (a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */
    
    GG (d, a, b, c, x[10], S22, 0x2441453); /* 22 */
    
    GG (c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */
    
    GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */
    
    GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */
    
    GG (d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */
    
    GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */
    
    GG (b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */
    
    GG (a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */
    
    GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */
    
    GG (c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */
    
    GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */
    
    
    
    /* Round 3 */
    
    HH (a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */
    
    HH (d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */
    
    HH (c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */
    
    HH (b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */
    
    HH (a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */
    
    HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */
    
    HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */
    
    HH (b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */
    
    HH (a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */
    
    HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */
    
    HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */
    
    HH (b, c, d, a, x[ 6], S34, 0x4881d05); /* 44 */
    
    HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */
    
    HH (d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */
    
    HH (c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */
    
    HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */
    
    
    
    /* Round 4 */
    
    II (a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */
    
    II (d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */
    
    II (c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */
    
    II (b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */
    
    II (a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */
    
    II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */
    
    II (c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */
    
    II (b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */
    
    II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */
    
    II (d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */
    
    II (c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */
    
    II (b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */
    
    II (a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */
    
    II (d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */
    
    II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */
    
    II (b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */
    
    
    
    state[0] += a;
    
    state[1] += b;
    
    state[2] += c;
    
    state[3] += d;
    
    
    
    /* Zeroize sensitive information. */
    
    MD5_memset ((POINTER)x, 0, sizeof (x));
    
    }
    
    
    
    /* Encodes input (UINT4) into output (unsigned char). Assumes len is
    
    a multiple of 4. */
    
    static void Encode (unsigned char *output,UINT4 *input,unsigned int len)
    
    {
    
    unsigned int i, j;
    
    
    
    for (i = 0, j = 0; j > 8) & 0xff);
    
       output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);
    
       output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);
    
    }
    
    }
    
    
    
    /* Decodes input (unsigned char) into output (UINT4). Assumes len is a multiple of 4. */
    
    static void Decode (UINT4 *output,unsigned char *input,unsigned int len)
    
    {
    
    unsigned int i, j;
    
    
    
       for (i = 0, j = 0; j  64)
    
        {
    
           MD5_CTX tctx;
    
           MD5Init(&tctx);
    
           MD5Update(&tctx,(unsigned char*) key, key_len);
    
           MD5Final(tk, &tctx);
    
           key = (char*)tk;
    
        key_len = 16;
    
        }
    
    
    
        /*
    
         * the HMAC_MD5 transform looks like:
    
         *
    
         * MD5(K XOR opad, MD5(K XOR ipad, text))
    
         *
    
         * where K is an n byte key
    
         * ipad is the byte 0x36 repeated 64 times
    
         * opad is the byte 0x5c repeated 64 times
    
         * and text is the data being protected
    
         */
    
    
    
        /* start out by storing key in pads */
    
       
    
        /* bzero( k_ipad, sizeof k_ipad);
    
           bzero( k_opad, sizeof k_opad);
    
        */
    
    
    
        for(i=0;i
    
    
    
    Makefile文件
    
    
    
    
    
    #$File: Makefile
    
    #$Date: Sun Apr 11 16:47:22 2010 CST
    
    #$Author: Ted Yin 
    
    #@package:Xem
    
    #@license:GNU Lesser General Public License 3 or any later version                   
    
    #@note:CST in $Date means China Standard Time instead of Central Standard Time
    
    
    
    all: base64.o xem.o xemfunc.o
    
    	g++ *.o -o xem -g -Wall
    
    
    
    base64.o: base64.cpp base64.h
    
    	g++ base64.cpp -o base64.o -c -Wall
    
    
    
    xem.o: xem.cpp
    
    	g++ xem.cpp -o xem.o -c -Wall
    
    
    
    xemfunc.o:xemfunc.cpp xemfunc.h
    
    	g++ xemfunc.cpp -o xemfunc.o -c -Wall
    
    

